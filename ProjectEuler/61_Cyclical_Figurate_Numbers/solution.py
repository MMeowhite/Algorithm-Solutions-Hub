def cyclical_figurate_numbers():
	"""
	Question: Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are generated by the following formulae:
		Triangle: P3,n = n(n+1)/2 1,3,6,10,15,...
		Square: P4,n = n^2 1,4,9,16,...
		Pentagonal: P5,n = 1,5,12,22,35,...
		Hexagonal: P6,n = n(2n-1) 1,6,15,28,45,...
		Heptagonal: P7,n = n(5n-3)/2 1,7,18,34,55,...
		Octagonal: P8,n = n(3n-2)
	The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three
	 interesting properties:
	 	1. The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including the last number with the first).
	 	2. Each polygonal type: triangle (P3,127 = 8128), square (P4,91 = 8281),
		and pentagonal(P5,44 = 2882), is represented by a different number in
		the set
		3. This is the only set of 4-digit numbers with this property.
	Find the sum of the only ordered set of six cyclic 4-digit numbers for which
	 each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal,
	 and octagonal, is represented by a different number in the set.
	"""
	polygonals = generate_all_polygonals()
	used_type = []

	for k in range(3, 9):
		for num in polygonals[k]:
			result = dfs([num], [k], polygonals)
			if result:
				return sum(result)
	return 0

def dfs(path, used_types, polygonals):
	if len(path) == 6:
		if str(path[-1])[2:] == str(path[0])[:2]:
			return path
		return None
	for k in range(3, 9):
		if k in used_types:
			continue
		for num in polygonals[k]:
			if not path or str(path[-1])[2:] == str(num)[:2]:
				res = dfs(path + [num], used_types + [k], polygonals)
				if res:
					return res
	return None

def polygonal(n, k):
	if k == 3:
		return n * (n + 1) // 2
	elif k == 4:
		return n * n
	elif k == 5:
		return n * (3 * n - 1) // 2
	elif k == 6:
		return n * (2 * n - 1)
	elif k == 7:
		return n * (5 * n - 3) // 2
	elif k == 8:
		return n * (3 * n - 2)

def generate_all_polygonals():
	poly_dict = {}
	for k in range(3, 9):
		lst = []
		n = 1
		while True:
			val = polygonal(n, k)
			if val > 9999:
				break
			if val >= 1000:
				lst.append(val)
			n += 1
		poly_dict[k] = lst
	return poly_dict


if __name__ == "__main__":
	print(cyclical_figurate_numbers())
