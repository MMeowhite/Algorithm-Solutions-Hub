import math

def is_pentagonal(num):
    """Check if a number is a pentagonal number using the inverse formula."""
    n = (math.sqrt(24 * num + 1) + 1) / 6
    return n.is_integer()

def pentagon_numbers():
    """
    Question: Pentagonal numbers are generated by the formula, Pn = n(3n-1)/2.
    The first ten pentagonal numbers are:
        1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
    It can be seen that P4+P7 = 22 + 70 = 92 = P8. However, their difference,
    70 - 22 = 48, is not pentagonal.
    Find the pair of pentagonal numbers, Pj and Pk, for which their sum and
    difference are pentagonal and D = |Pk - Pj| is minimised; what is the value
    of D?
    """
    pentagonals = []
    n = 1
    min_diff = float('inf')
    result = (0, 0)

    while True:
        # Generate the nth pentagonal number
        p = n * (3 * n - 1) // 2
        pentagonals.append(p)

        # Check all previous pentagonal numbers
        for j in range(len(pentagonals) - 1):
            pj = pentagonals[j]
            pk = p
            diff = pk - pj
            if diff < min_diff:
                # Check if the sum and difference are pentagonal
                if is_pentagonal(pk + pj) and is_pentagonal(diff):
                    min_diff = diff
                    result = (pj, pk)
                    print(f"New minimal difference found: {min_diff}, pj={pj}, pk={pk}")
        n += 1

        # Optional: Termination condition to prevent infinite loop (adjust as needed)
        if n > 10000:
            break

    return result, min_diff

if __name__ == "__main__":
    (pj, pk), min_diff = pentagon_numbers()
    print(f"The pair of pentagonal numbers is pj = {pj}, and pk = {pk}")
    print(f"The minimal difference is {min_diff}")
